# Указываем базовый образ для создания контейнера.
# Здесь образ Python версии 3.10 основанный на минимальной урезанной версии операционной системы(slim)
FROM python:3.10-slim

# Открывает порт 8000 в контейнере. Это необходимо для того, чтобы внешние приложения
# могли обращаться к вашему Django-приложению через этот порт.
EXPOSE 8000

# Устанавливает переменную окружения для Python, что вывод Python будет отправляться прямо
# в терминал без буферизации. Это полезно для лучшего контроля над выводом логов.
ENV PYTHONDONTWRITEBYTECODE=1

ENV PYTHONUNBUFFERED=1
# копируем requirements.txt
COPY requirements.txt .

# Устанавливает зависимости, перечисленные в файле requirements.txt, используя
# инструмент управления пакетами pip
RUN python -m pip install -r requirements.txt

# Устанавливает рабочую директорию внутри контейнера.
# Все последующие команды будут исполняться в этой директории
WORKDIR /app

# Копирует все файлы проекта из локальной директории внешнего проекта внутрь контейнера в директорию /app/.
COPY . /app

# Создаёт пользователя без прав root с явным UID и добавляет разрешение на доступ к папке /app
RUN adduser -u 5678 --disabled-password --gecos "" appuser && chown -R appuser /app
USER appuser

# Запускаем сервер Django при старте контейнера
CMD ["python", "manage.py", "runserver", "127.0.0.1:8000"]
